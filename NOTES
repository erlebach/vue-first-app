add to .eslintrc.js: 
"rules": {
      "no-unused-vars": "off"
}
to prevent this message from happening.
------------------------------------
2021-07-30
- Choose a node (hardcode for now). 
- List all the outbound flights. These are the out-degree neighbors
- List all the inbound flights. These are the in-degree neighbors
- List them in a Table, below the city table.

2021-08-14
- FlightsInAir works on its own. And I can change times. I am not using vuex
- FlightsInAir and CityTable do not work together. I get an error when 
I either 1) type a new city, or type in a new time.  
REASON: must have to do with how I am reading the data. Somehow, I am must
be interacting the two components. 
  (2021-08-14: both now work. I added some conditionals. I have to remove 
  colorByCity.vue from CityTable and put it in CityGraph*.vue)

Ideally, I want to have a singleton class to read the data from multiple locations. Alternatively, some intelligent cache mechanism. 

But I also need the capability to switch input files. The current class-based 
approach takes the file name as a constructor. This should work as long as 
the components are completely decoupled. But they are not. A table has elements
that when selected might point to the graph. 

I might want the various graphs to always be properly related to each other. 
Not clear what this means as yet. 

For now, I should be concerned with maintainability and flexibility, but 
not efficiency. Otherwise, I will never get a demo going. 

Another problem to solve: 
- I can watch(load.isDataLoaded()), but I cannot watch a computed value
defined in FlightsInAir.vue. So the following works: 

  watch(load.isDataLoaded(), (curVal, old) => {....}

But the following does NOT work: 

const isDataLoaded = computed(() => {
      return load.isDataLoaded();
    });

  watch(isDataLoaded, (curVal, old) => {....}

NOTE: load.isDataLoaded() returns a ref(). 
-------------------------------------------------------
2021-08-14
- Add Schdep and schArr to FlightsInAir table
-------------------------------------------------------
2021-09-06
Even if the flight from MIA does not have an arrival delay, there is still delay propagation because of the feeders connecting to the departing flights from PTY that are connected to the inbound flight from MIA. I should probably set the arrival times and all departure times of all flights downstream of the original flight from MIA to be their scheduled values. Rotation is still not taken into account.
---------------------------------------------------------
2021-09-18
TOEO
---------------------------------------------------------
2021-11-26
I plot data from endPoints. I create a graph and get the correct degrees. 
But when the graph is regenerated for another cities, most of the degrees 
are zero. I do not know why. Everything is fine the first time the graph is drawn (regardless of the city). But the next city produces the wrong 
result. That implies that the graph is not being updated properly. I could solve this by regenerating the graph, but I would rather simply replace the nodes and edges. 

Solved: do a graph.destroy() and recreate the graph with different edges/nodes. 
I can  draw the graph with new edges/nodes without destroying it. However, the calculation of degree of the nodes will be incorrect. 
---------------------------------------------------------
2021-12-19
- Scheduled rotation is an edge quantity (feeder-outbound pair, or _f, _nf pair). 
- However, the flightTable has a rotation associated with it. This rotation, to be consistent with Copa tables, 
	is associated with an outbound flight. In other words, to get the rotation for a flight in the FSU table, 
	identify the flight pair such that this flight is outbound, and assign the rotation to it. 
- plannedRot is now on the _nf vertex of each edge. Sometimes it is not defined, in which case, I set it to 10,000. This is 
  the case when a node (flight) is not connected to an incoming flight with the same tail. (WHY DOES THIS HAPPEN?)
- Fix edge and node tooltips. 
  Edges of same tail should have plannedRot (OK) and availRot (not present) and Predicted Available Rotation (availRotP). 
  as well as availRotSlack = availRot - minReq, and availRotSlackP = availRotP - minReq;  (WOrk on this next). 
  The variable rotSlack in the code is really availRotSlack (might change the variable at a later time)
-------------------------------------------------------------
2021-12-20
- FSU: id: 2021-12-20PTYCNF20:280765:, inbounds and outbounds are undefined. WHY? 
- Added nbInbounds and nbOutbounds to FSU in initializeNodes
- Added inboundsIds and outboundsIds to FSU in initializeNodes
  - inboundsIds (list of ids) replaces inbounds (list of records)
initializeNodes is important to get right. Slack, rotation, etc are updated in this routine. 

initializeNodes is converted (inbounds ==> inboundsIds)

Given bookings_in[id], which returns a list of ids, I need to get the booking row with this id pair. 
id_f - id_nf ==> id  (is the id of the bookings list). 
Create a bookingsMap = u.createMapping(bookings, 'id')

Create a function getBooking(bookingsMap, id_f, id_nf)  {
	return bookingsMap[id_f + '-' _ id_nf]
}

Tiers 1 through 4 appear to be be working properly: there are three links when tier is four. 
When tier is 5, there are sometimes 5 or more links, which implies something is not quite right.This occurs
when the graph is too complex. 

ERROR: Sometimes, Level=0 is not present. WHY NOT??
initialId: 2021-12-21PTYBAQ03:180826: in this case, there is no level=0. 
In the node tooltip, give the node level. 
The level 0 node is not always present. TODO: FIx ERROR. The level=0 nodes should ALWAYS be present!

